* MUTUAL EXCLUSION PROTOCOLS ANALYSIS
* Hyman's algorithm for mutual exclusion. (1966)

* 2 processes: H1, H2
* 2 boolean variables: b1, b2 (both initially false)
* when Hi wants to enter the critical section, then it sets bi to true
* an integer variable k, taking value in {1, 2}
* (initial value is arbitrary)
* the process Hk has priority over the other process
* 
* process H1 in pseudocde
* while(true){
* ...                       non critical section
* b1 = true;                H1 wants to enter the critical section
* while(k == 2){            while H2 has the priority
*   while(b2) skip;         H1 waits its turn
*   k = 1;                  H1 sets priority to itself
* }
* ...                       H1 enters the critical section
* b1 = false;               H1 leaves the critical section
* }
* 
* process H2 is analogous to H1 

** TODO: ADAPT THE FOLLOWING CODE OF THE PETERSON'S ALGORITHM TO THE HYMAN'S ONES

B1f = 'b1rf.B1f + b1wf.B1f + b1wt.B1t;
B1t = 'b1rt.B1t + b1wf.B1f + b1wt.B1t;

B2f = 'b2rf.B2f + b2wf.B2f + b2wt.B2t;
B2t = 'b2rt.B2t + b2wf.B2f + b2wt.B2t;

K1 = 'kr1.K1 + kw1.K1 + kw2.K2;
K2 = 'kr2.K2 + kw1.K1 + kw2.K2;

P1 = 'b1wt.'kw2.P11;
P11 = b2rf.P12 + b2rt.(kr2.P11 + kr1.P12);  * to leave the cycle loop
P12 = enter1.exit1.'b1wf.P1;                * just something to observe

P2 = 'b2wt.'kw1.P21;                        * analogous to P1
P21 = b1rf.P22 + b1rt.(kr1.P21 + kr2.P22);
P22 = enter2.exit2.'b2wf.P2;

set L = {b1rf, b2rf, b1rt, b2rt, b1wf, b2wf, b1wt, b2wt, kr1, kr2, kw1, kw2};
Peterson = (P1 | P2 | B1f | B2f | K1) \ L;

Spec = enter1.exit1.Spec + enter2.exit2.Spec;
